// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nucleic/rollup/rollup.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisAccount is a struct for the genesis account for the Rollup
type GenesisAccount struct {
	// amount of coins to be sent to the genesis address
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
	// address is a bech-32 address of the genesis account
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GenesisAccount) Reset()         { *m = GenesisAccount{} }
func (m *GenesisAccount) String() string { return proto.CompactTextString(m) }
func (*GenesisAccount) ProtoMessage()    {}
func (*GenesisAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca266ab929c281b5, []int{0}
}
func (m *GenesisAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAccount.Merge(m, src)
}
func (m *GenesisAccount) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAccount.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAccount proto.InternalMessageInfo

func (m *GenesisAccount) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *GenesisAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RollupGenesisState is a partial repr of the state the hub can expect the Rollup to be in upon genesis
type RollupGenesisState struct {
	// genesis_accounts is a list of token allocations
	GenesisAccounts []*GenesisAccount `protobuf:"bytes,1,rep,name=genesis_accounts,json=genesisAccounts,proto3" json:"genesis_accounts,omitempty"`
	// is_genesis_event is a boolean that indicates if the genesis event has occured
	IsGenesisEvent bool `protobuf:"varint,2,opt,name=is_genesis_event,json=isGenesisEvent,proto3" json:"is_genesis_event,omitempty"`
}

func (m *RollupGenesisState) Reset()         { *m = RollupGenesisState{} }
func (m *RollupGenesisState) String() string { return proto.CompactTextString(m) }
func (*RollupGenesisState) ProtoMessage()    {}
func (*RollupGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca266ab929c281b5, []int{1}
}
func (m *RollupGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupGenesisState.Merge(m, src)
}
func (m *RollupGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *RollupGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_RollupGenesisState proto.InternalMessageInfo

func (m *RollupGenesisState) GetGenesisAccounts() []*GenesisAccount {
	if m != nil {
		return m.GenesisAccounts
	}
	return nil
}

func (m *RollupGenesisState) GetIsGenesisEvent() bool {
	if m != nil {
		return m.IsGenesisEvent
	}
	return false
}

// Rollup defines a Rollup object. First the Rollup is created and then
// sequencers can be created and attached. The Rollup is identified by RollupId
type Rollup struct {
	// The unique identifier of the Rollup chain.
	// The RollupId follows the same standard as cosmos chain_id.
	RollupId string `protobuf:"bytes,1,opt,name=rollup_id,json=rollupId,proto3" json:"rollup_id,omitempty"`
	// creator is the bech32-encoded address of the Rollup creator.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// version is the software and configuration version.
	// starts from 1 and increases by one on every MsgUpdateState
	Version uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// maxSequencers is the maximum number of sequencers.
	MaxSequencers uint64 `protobuf:"varint,4,opt,name=maxSequencers,proto3" json:"maxSequencers,omitempty"`
	// permissionedAddresses is a bech32-encoded address list of the sequencers that are allowed to serve this RollupId.
	// In the case of an empty list, the Rollup is considered permissionless.
	PermissionedAddresses []string `protobuf:"bytes,5,rep,name=permissionedAddresses,proto3" json:"permissionedAddresses,omitempty"`
	// tokenMetadata is a list of TokenMetadata that are registered on this Rollup
	TokenMetadata []*TokenMetadata `protobuf:"bytes,6,rep,name=tokenMetadata,proto3" json:"tokenMetadata,omitempty"`
	// genesis_state is a partial repr of the state the hub can expect the Rollup to be in upon genesis
	GenesisState RollupGenesisState `protobuf:"bytes,7,opt,name=genesis_state,json=genesisState,proto3" json:"genesis_state"`
	// channel_id will be set to the canonical IBC channel of the Rollup.
	ChannelId string `protobuf:"bytes,8,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// frozen is a boolean that indicates if the Rollup is frozen.
	Frozen bool `protobuf:"varint,9,opt,name=frozen,proto3" json:"frozen,omitempty"`
}

func (m *Rollup) Reset()         { *m = Rollup{} }
func (m *Rollup) String() string { return proto.CompactTextString(m) }
func (*Rollup) ProtoMessage()    {}
func (*Rollup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca266ab929c281b5, []int{2}
}
func (m *Rollup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rollup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rollup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rollup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rollup.Merge(m, src)
}
func (m *Rollup) XXX_Size() int {
	return m.Size()
}
func (m *Rollup) XXX_DiscardUnknown() {
	xxx_messageInfo_Rollup.DiscardUnknown(m)
}

var xxx_messageInfo_Rollup proto.InternalMessageInfo

func (m *Rollup) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *Rollup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Rollup) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Rollup) GetMaxSequencers() uint64 {
	if m != nil {
		return m.MaxSequencers
	}
	return 0
}

func (m *Rollup) GetPermissionedAddresses() []string {
	if m != nil {
		return m.PermissionedAddresses
	}
	return nil
}

func (m *Rollup) GetTokenMetadata() []*TokenMetadata {
	if m != nil {
		return m.TokenMetadata
	}
	return nil
}

func (m *Rollup) GetGenesisState() RollupGenesisState {
	if m != nil {
		return m.GenesisState
	}
	return RollupGenesisState{}
}

func (m *Rollup) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Rollup) GetFrozen() bool {
	if m != nil {
		return m.Frozen
	}
	return false
}

// Rollup summary is a compact representation of Rollup
type RollupSummary struct {
	// The unique identifier of the Rollup chain.
	// The RollupId follows the same standard as cosmos chain_id.
	RollupId string `protobuf:"bytes,1,opt,name=rollup_id,json=rollupId,proto3" json:"rollup_id,omitempty"`
	// Defines the index of the last Rollup UpdateState.
	LatestStateIndex *StateInfoIndex `protobuf:"bytes,2,opt,name=latestStateIndex,proto3" json:"latestStateIndex,omitempty"`
	// Defines the index of the last Rollup UpdateState that was finalized.
	LatestFinalizedStateIndex *StateInfoIndex `protobuf:"bytes,3,opt,name=latestFinalizedStateIndex,proto3" json:"latestFinalizedStateIndex,omitempty"`
}

func (m *RollupSummary) Reset()         { *m = RollupSummary{} }
func (m *RollupSummary) String() string { return proto.CompactTextString(m) }
func (*RollupSummary) ProtoMessage()    {}
func (*RollupSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca266ab929c281b5, []int{3}
}
func (m *RollupSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupSummary.Merge(m, src)
}
func (m *RollupSummary) XXX_Size() int {
	return m.Size()
}
func (m *RollupSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RollupSummary proto.InternalMessageInfo

func (m *RollupSummary) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *RollupSummary) GetLatestStateIndex() *StateInfoIndex {
	if m != nil {
		return m.LatestStateIndex
	}
	return nil
}

func (m *RollupSummary) GetLatestFinalizedStateIndex() *StateInfoIndex {
	if m != nil {
		return m.LatestFinalizedStateIndex
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisAccount)(nil), "nucleic.rollup.GenesisAccount")
	proto.RegisterType((*RollupGenesisState)(nil), "nucleic.rollup.RollupGenesisState")
	proto.RegisterType((*Rollup)(nil), "nucleic.rollup.Rollup")
	proto.RegisterType((*RollupSummary)(nil), "nucleic.rollup.RollupSummary")
}

func init() { proto.RegisterFile("nucleic/rollup/rollup.proto", fileDescriptor_ca266ab929c281b5) }

var fileDescriptor_ca266ab929c281b5 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xe8, 0xe8, 0x16, 0x8f, 0x96, 0xca, 0x02, 0x94, 0x76, 0x5a, 0xa8, 0x2a, 0x0e, 0xb9,
	0x90, 0xa8, 0x03, 0x89, 0xf3, 0x36, 0x01, 0x2a, 0x68, 0x97, 0x94, 0x13, 0x42, 0xaa, 0xdc, 0xe4,
	0x2d, 0xb3, 0x9a, 0xd8, 0x25, 0x76, 0x4a, 0xb7, 0x13, 0x57, 0x6e, 0xfc, 0xac, 0x1d, 0x77, 0x42,
	0x9c, 0x10, 0x6a, 0xff, 0x08, 0x8a, 0xed, 0x48, 0x6d, 0x37, 0x10, 0xa7, 0xe4, 0xbd, 0xef, 0xbd,
	0xf7, 0x3d, 0x7f, 0x9f, 0x8d, 0x0e, 0x58, 0x11, 0xa5, 0x40, 0xa3, 0x20, 0xe7, 0x69, 0x5a, 0xcc,
	0xcc, 0xc7, 0x9f, 0xe5, 0x5c, 0x72, 0xdc, 0x32, 0xa0, 0xaf, 0xb3, 0xdd, 0x47, 0x09, 0x4f, 0xb8,
	0x82, 0x82, 0xf2, 0x4f, 0x57, 0x75, 0xdd, 0x88, 0x8b, 0x8c, 0x8b, 0x60, 0x42, 0x04, 0x04, 0xf3,
	0xc1, 0x04, 0x24, 0x19, 0x04, 0x11, 0xa7, 0xcc, 0xe0, 0xdd, 0x2d, 0x0a, 0x21, 0x89, 0x04, 0x83,
	0x75, 0xb6, 0xb0, 0x09, 0x61, 0x53, 0x0d, 0xf5, 0x23, 0xd4, 0x7a, 0x0b, 0x0c, 0x04, 0x15, 0xc7,
	0x51, 0xc4, 0x0b, 0x26, 0xf1, 0x2b, 0xd4, 0x20, 0x59, 0xf9, 0xe7, 0x58, 0x3d, 0xcb, 0xdb, 0x3f,
	0xea, 0xf8, 0x9a, 0xd9, 0x2f, 0x99, 0x7d, 0xc3, 0xec, 0x9f, 0x72, 0xca, 0x4e, 0x76, 0xae, 0x7f,
	0x3d, 0xad, 0x85, 0xa6, 0x1c, 0x3b, 0x68, 0x97, 0xc4, 0x71, 0x0e, 0x42, 0x38, 0xf7, 0x7a, 0x96,
	0x67, 0x87, 0x55, 0xd8, 0xff, 0x66, 0x21, 0x1c, 0x2a, 0x6a, 0xc3, 0x35, 0x2a, 0x97, 0xc3, 0x43,
	0xd4, 0x4e, 0x74, 0x3c, 0x26, 0x9a, 0x5c, 0x38, 0x56, 0xaf, 0xee, 0xed, 0x1f, 0xb9, 0xfe, 0xa6,
	0x26, 0xfe, 0xe6, 0x8e, 0xe1, 0xc3, 0x64, 0x23, 0x16, 0xd8, 0x43, 0x6d, 0x2a, 0xc6, 0xd5, 0x34,
	0x98, 0x03, 0x93, 0x6a, 0x89, 0xbd, 0xb0, 0x45, 0x85, 0x69, 0x7e, 0x5d, 0x66, 0xfb, 0x5f, 0xeb,
	0xa8, 0xa1, 0x77, 0xc1, 0x07, 0xc8, 0xd6, 0xe3, 0xc7, 0x34, 0x56, 0x87, 0xb5, 0xc3, 0x3d, 0x9d,
	0x18, 0xc6, 0xe5, 0x69, 0xa2, 0x1c, 0x88, 0xe4, 0x79, 0x75, 0x1a, 0x13, 0x96, 0xc8, 0x1c, 0x72,
	0x41, 0x39, 0x73, 0xea, 0x3d, 0xcb, 0xdb, 0x09, 0xab, 0x10, 0x3f, 0x43, 0xcd, 0x8c, 0x2c, 0x46,
	0xf0, 0xb9, 0x00, 0x16, 0x41, 0x2e, 0x9c, 0x1d, 0x85, 0x6f, 0x26, 0xf1, 0x4b, 0xf4, 0x78, 0x06,
	0x79, 0x46, 0x45, 0xd9, 0x03, 0xf1, 0xb1, 0x16, 0x09, 0x84, 0x73, 0xbf, 0x57, 0xf7, 0xec, 0xf0,
	0x6e, 0x10, 0x9f, 0xa2, 0xa6, 0xe4, 0x53, 0x60, 0x67, 0x20, 0x49, 0x4c, 0x24, 0x71, 0x1a, 0x4a,
	0xa9, 0xc3, 0x6d, 0xa5, 0x3e, 0xac, 0x17, 0x85, 0x9b, 0x3d, 0xf8, 0x0c, 0x35, 0x2b, 0x8d, 0xd4,
	0xfd, 0x70, 0x76, 0x95, 0xc5, 0xfd, 0xed, 0x21, 0xb7, 0xcd, 0x32, 0x5e, 0x3f, 0x48, 0xd6, 0x0d,
	0x3c, 0x44, 0x28, 0xba, 0x20, 0x8c, 0x41, 0x5a, 0x2a, 0xb8, 0xa7, 0x64, 0xb2, 0x4d, 0x66, 0x18,
	0xe3, 0x27, 0xa8, 0x71, 0x9e, 0xf3, 0x2b, 0x60, 0x8e, 0xad, 0xac, 0x30, 0x51, 0xff, 0x87, 0x85,
	0x9a, 0x9a, 0x61, 0x54, 0x64, 0x19, 0xc9, 0x2f, 0xff, 0xed, 0xc4, 0x3b, 0xd4, 0x4e, 0x89, 0x04,
	0x21, 0x15, 0xe9, 0x90, 0xc5, 0xb0, 0x50, 0x96, 0xdc, 0x71, 0x4d, 0x4c, 0xc5, 0x39, 0x57, 0x55,
	0xe1, 0xad, 0x3e, 0xfc, 0x09, 0x75, 0x74, 0xee, 0x0d, 0x65, 0x24, 0xa5, 0x57, 0x10, 0xaf, 0x0d,
	0xad, 0xff, 0xd7, 0xd0, 0xbf, 0x0f, 0x38, 0x79, 0x7f, 0xbd, 0x74, 0xad, 0x9b, 0xa5, 0x6b, 0xfd,
	0x5e, 0xba, 0xd6, 0xf7, 0x95, 0x5b, 0xbb, 0x59, 0xb9, 0xb5, 0x9f, 0x2b, 0xb7, 0xf6, 0x71, 0x90,
	0x50, 0x79, 0x51, 0x4c, 0xfc, 0x88, 0x67, 0x81, 0x19, 0xff, 0x9c, 0x81, 0xfc, 0xc2, 0xf3, 0x69,
	0x15, 0x07, 0x8b, 0xea, 0x79, 0xca, 0xcb, 0x19, 0x88, 0x49, 0x43, 0x3d, 0xd0, 0x17, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x76, 0x9b, 0xa9, 0xd8, 0x3c, 0x04, 0x00, 0x00,
}

func (m *GenesisAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RollupGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGenesisEvent {
		i--
		if m.IsGenesisEvent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.GenesisAccounts) > 0 {
		for iNdEx := len(m.GenesisAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GenesisAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRollup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Rollup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rollup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rollup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Frozen {
		i--
		if m.Frozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.GenesisState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.TokenMetadata) > 0 {
		for iNdEx := len(m.TokenMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRollup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PermissionedAddresses) > 0 {
		for iNdEx := len(m.PermissionedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PermissionedAddresses[iNdEx])
			copy(dAtA[i:], m.PermissionedAddresses[iNdEx])
			i = encodeVarintRollup(dAtA, i, uint64(len(m.PermissionedAddresses[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaxSequencers != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.MaxSequencers))
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollupSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestFinalizedStateIndex != nil {
		{
			size, err := m.LatestFinalizedStateIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestStateIndex != nil {
		{
			size, err := m.LatestStateIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollup(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovRollup(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	return n
}

func (m *RollupGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GenesisAccounts) > 0 {
		for _, e := range m.GenesisAccounts {
			l = e.Size()
			n += 1 + l + sovRollup(uint64(l))
		}
	}
	if m.IsGenesisEvent {
		n += 2
	}
	return n
}

func (m *Rollup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRollup(uint64(m.Version))
	}
	if m.MaxSequencers != 0 {
		n += 1 + sovRollup(uint64(m.MaxSequencers))
	}
	if len(m.PermissionedAddresses) > 0 {
		for _, s := range m.PermissionedAddresses {
			l = len(s)
			n += 1 + l + sovRollup(uint64(l))
		}
	}
	if len(m.TokenMetadata) > 0 {
		for _, e := range m.TokenMetadata {
			l = e.Size()
			n += 1 + l + sovRollup(uint64(l))
		}
	}
	l = m.GenesisState.Size()
	n += 1 + l + sovRollup(uint64(l))
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.Frozen {
		n += 2
	}
	return n
}

func (m *RollupSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.LatestStateIndex != nil {
		l = m.LatestStateIndex.Size()
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.LatestFinalizedStateIndex != nil {
		l = m.LatestFinalizedStateIndex.Size()
		n += 1 + l + sovRollup(uint64(l))
	}
	return n
}

func sovRollup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollup(x uint64) (n int) {
	return sovRollup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisAccounts = append(m.GenesisAccounts, &GenesisAccount{})
			if err := m.GenesisAccounts[len(m.GenesisAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGenesisEvent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGenesisEvent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rollup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSequencers", wireType)
			}
			m.MaxSequencers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSequencers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionedAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionedAddresses = append(m.PermissionedAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenMetadata = append(m.TokenMetadata, &TokenMetadata{})
			if err := m.TokenMetadata[len(m.TokenMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frozen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestStateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestStateIndex == nil {
				m.LatestStateIndex = &StateInfoIndex{}
			}
			if err := m.LatestStateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFinalizedStateIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestFinalizedStateIndex == nil {
				m.LatestFinalizedStateIndex = &StateInfoIndex{}
			}
			if err := m.LatestFinalizedStateIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollup = fmt.Errorf("proto: unexpected end of group")
)
