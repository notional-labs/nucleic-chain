// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nucleic/rollapp/state_info.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status of state
type Status int32

const (
	Status_PENDING   Status = 0
	Status_FINALIZED Status = 1
	Status_REVERTED  Status = 3
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "FINALIZED",
	3: "REVERTED",
}

var Status_value = map[string]int32{
	"PENDING":   0,
	"FINALIZED": 1,
	"REVERTED":  3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_759345ac0f400d2c, []int{0}
}

// StateInfoIndex is the data used for indexing and retrieving a StateInfo
// it updated and saved with every UpdateState in StateInfo.
// We use the this structure also for:
// 1. LatestStateInfoIndex which defines the rollapps' current (latest) index of
// the last UpdateState
// 2. LatestFinalizedStateIndex which defines the rollapps' current (latest)
// index of the latest StateInfo that was finalized
type StateInfoIndex struct {
	// rollapp_id is the rollapp that the sequencer belongs to and asking to
	// update it used to identify the what rollapp a StateInfo belongs The
	// rollapp_id follows the same standard as cosmos chain_id
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// index is a sequential increasing number, updating on each
	// state update used for indexing to a specific state info, the first index is
	// 1
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *StateInfoIndex) Reset()         { *m = StateInfoIndex{} }
func (m *StateInfoIndex) String() string { return proto.CompactTextString(m) }
func (*StateInfoIndex) ProtoMessage()    {}
func (*StateInfoIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_759345ac0f400d2c, []int{0}
}
func (m *StateInfoIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateInfoIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateInfoIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateInfoIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateInfoIndex.Merge(m, src)
}
func (m *StateInfoIndex) XXX_Size() int {
	return m.Size()
}
func (m *StateInfoIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_StateInfoIndex.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfoIndex proto.InternalMessageInfo

func (m *StateInfoIndex) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *StateInfoIndex) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// StateInfo defines a rollapps' state.
type StateInfo struct {
	// state_info_index defines what rollapp the state belongs to
	// and in which index it can be referenced
	StateInfoIndex StateInfoIndex `protobuf:"bytes,1,opt,name=state_info_index,json=stateInfoIndex,proto3" json:"state_info_index"`
	// sequencer is the bech32-encoded address of the sequencer sent the update
	Sequencer string `protobuf:"bytes,2,opt,name=sequencer,proto3" json:"sequencer,omitempty"`
	// start_height is the block height of the first block in the batch
	StartHeight uint64 `protobuf:"varint,3,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// num_blocks is the number of blocks included in this batch update
	NumBlocks uint64 `protobuf:"varint,4,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// da_path is the description of the location on the DA layer
	DaPath string `protobuf:"bytes,5,opt,name=da_path,json=daPath,proto3" json:"da_path,omitempty"`
	// version is the version of the rollapp
	Version uint64 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// creation_height is the height at which the UpdateState took place
	CreationHeight uint64 `protobuf:"varint,7,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	// status is the status of the state update
	Status Status `protobuf:"varint,8,opt,name=status,proto3,enum=nucleic.rollapp.Status" json:"status,omitempty"`
	// bds is a list of block description objects (one per block)
	// the list must be ordered by height, starting from start_height to
	// start_height+num_blocks-1
	BlockDescs BlockDescriptors `protobuf:"bytes,9,opt,name=block_descs,json=blockDescs,proto3" json:"block_descs"`
}

func (m *StateInfo) Reset()         { *m = StateInfo{} }
func (m *StateInfo) String() string { return proto.CompactTextString(m) }
func (*StateInfo) ProtoMessage()    {}
func (*StateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_759345ac0f400d2c, []int{1}
}
func (m *StateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateInfo.Merge(m, src)
}
func (m *StateInfo) XXX_Size() int {
	return m.Size()
}
func (m *StateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfo proto.InternalMessageInfo

func (m *StateInfo) GetStateInfoIndex() StateInfoIndex {
	if m != nil {
		return m.StateInfoIndex
	}
	return StateInfoIndex{}
}

func (m *StateInfo) GetSequencer() string {
	if m != nil {
		return m.Sequencer
	}
	return ""
}

func (m *StateInfo) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *StateInfo) GetNumBlocks() uint64 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

func (m *StateInfo) GetDaPath() string {
	if m != nil {
		return m.DaPath
	}
	return ""
}

func (m *StateInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StateInfo) GetCreationHeight() uint64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *StateInfo) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *StateInfo) GetBlockDescs() BlockDescriptors {
	if m != nil {
		return m.BlockDescs
	}
	return BlockDescriptors{}
}

// StateInfoSummary is a compact representation of StateInfo
type StateInfoSummary struct {
	// state_info_index defines what rollapp the state belongs to
	// and in which index it can be referenced
	StateInfoIndex StateInfoIndex `protobuf:"bytes,1,opt,name=state_info_index,json=stateInfoIndex,proto3" json:"state_info_index"`
	// status is the status of the state update
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=nucleic.rollapp.Status" json:"status,omitempty"`
	// creation_height is the height at which the UpdateState took place
	CreationHeight uint64 `protobuf:"varint,3,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
}

func (m *StateInfoSummary) Reset()         { *m = StateInfoSummary{} }
func (m *StateInfoSummary) String() string { return proto.CompactTextString(m) }
func (*StateInfoSummary) ProtoMessage()    {}
func (*StateInfoSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_759345ac0f400d2c, []int{2}
}
func (m *StateInfoSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateInfoSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateInfoSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateInfoSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateInfoSummary.Merge(m, src)
}
func (m *StateInfoSummary) XXX_Size() int {
	return m.Size()
}
func (m *StateInfoSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_StateInfoSummary.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfoSummary proto.InternalMessageInfo

func (m *StateInfoSummary) GetStateInfoIndex() StateInfoIndex {
	if m != nil {
		return m.StateInfoIndex
	}
	return StateInfoIndex{}
}

func (m *StateInfoSummary) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *StateInfoSummary) GetCreationHeight() uint64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

// BlockHeightToFinalizationQueue defines a map from block height to list of
// states to finalized
type BlockHeightToFinalizationQueue struct {
	// creation_height is the block height that the state should be finalized
	CreationHeight uint64 `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	// finalization_queue is a list of states that are waiting to be finalized
	// when the block height becomes creation_height
	FinalizationQueue []StateInfoIndex `protobuf:"bytes,2,rep,name=finalization_queue,json=finalizationQueue,proto3" json:"finalization_queue"`
}

func (m *BlockHeightToFinalizationQueue) Reset()         { *m = BlockHeightToFinalizationQueue{} }
func (m *BlockHeightToFinalizationQueue) String() string { return proto.CompactTextString(m) }
func (*BlockHeightToFinalizationQueue) ProtoMessage()    {}
func (*BlockHeightToFinalizationQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_759345ac0f400d2c, []int{3}
}
func (m *BlockHeightToFinalizationQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeightToFinalizationQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeightToFinalizationQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeightToFinalizationQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightToFinalizationQueue.Merge(m, src)
}
func (m *BlockHeightToFinalizationQueue) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeightToFinalizationQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightToFinalizationQueue.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightToFinalizationQueue proto.InternalMessageInfo

func (m *BlockHeightToFinalizationQueue) GetCreationHeight() uint64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *BlockHeightToFinalizationQueue) GetFinalizationQueue() []StateInfoIndex {
	if m != nil {
		return m.FinalizationQueue
	}
	return nil
}

func init() {
	proto.RegisterEnum("nucleic.rollapp.Status", Status_name, Status_value)
	proto.RegisterType((*StateInfoIndex)(nil), "nucleic.rollapp.StateInfoIndex")
	proto.RegisterType((*StateInfo)(nil), "nucleic.rollapp.StateInfo")
	proto.RegisterType((*StateInfoSummary)(nil), "nucleic.rollapp.StateInfoSummary")
	proto.RegisterType((*BlockHeightToFinalizationQueue)(nil), "nucleic.rollapp.BlockHeightToFinalizationQueue")
}

func init() { proto.RegisterFile("nucleic/rollapp/state_info.proto", fileDescriptor_759345ac0f400d2c) }

var fileDescriptor_759345ac0f400d2c = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x65, 0x03, 0x81, 0x78, 0x48, 0x09, 0x5d, 0x45, 0x8a, 0x15, 0xb5, 0x0e, 0xe1, 0xd0, 0xa2,
	0x4a, 0xc5, 0x12, 0xfd, 0x82, 0x22, 0x9c, 0xc6, 0x52, 0x44, 0x53, 0x07, 0xf5, 0x90, 0x8b, 0x65,
	0xec, 0x05, 0x56, 0x81, 0x5d, 0xc7, 0xbb, 0x6e, 0x93, 0x7e, 0x45, 0xa5, 0x7e, 0x40, 0xbf, 0xa4,
	0xf7, 0x1c, 0x73, 0xec, 0xa9, 0xaa, 0xe0, 0x47, 0x2a, 0xaf, 0x0d, 0x34, 0xd4, 0x87, 0x1c, 0x7a,
	0xf3, 0x3c, 0xbf, 0x99, 0x79, 0xef, 0x8d, 0x16, 0x1a, 0x2c, 0xf6, 0xa7, 0x84, 0xfa, 0x66, 0xc4,
	0xa7, 0x53, 0x2f, 0x0c, 0x4d, 0x21, 0x3d, 0x49, 0x5c, 0xca, 0x46, 0xbc, 0x1d, 0x46, 0x5c, 0x72,
	0xbc, 0x97, 0x31, 0xda, 0x19, 0xe3, 0x70, 0x7f, 0xcc, 0xc7, 0x5c, 0xfd, 0x33, 0x93, 0xaf, 0x94,
	0x76, 0xf8, 0x62, 0x73, 0xd0, 0x70, 0xca, 0xfd, 0x2b, 0x37, 0x20, 0xc2, 0x8f, 0x68, 0x28, 0x79,
	0x94, 0xf2, 0x9a, 0x16, 0xd4, 0x2e, 0x92, 0x15, 0x36, 0x1b, 0x71, 0x9b, 0x05, 0xe4, 0x06, 0x3f,
	0x07, 0xc8, 0x7a, 0x5c, 0x1a, 0xe8, 0xa8, 0x81, 0x5a, 0x9a, 0xa3, 0x65, 0x88, 0x1d, 0xe0, 0x7d,
	0xd8, 0xa6, 0x09, 0x4f, 0xdf, 0x6a, 0xa0, 0x56, 0xc9, 0x49, 0x8b, 0xe6, 0xb7, 0x22, 0x68, 0xab,
	0x39, 0xf8, 0x3d, 0xd4, 0xd7, 0xba, 0xdd, 0x94, 0x9e, 0x0c, 0xaa, 0x76, 0x8e, 0xda, 0x1b, 0xf2,
	0xdb, 0x0f, 0xb7, 0x77, 0x4b, 0x77, 0xbf, 0x8e, 0x0a, 0x4e, 0x4d, 0x3c, 0xd4, 0xf4, 0x0c, 0x34,
	0x41, 0xae, 0x63, 0xc2, 0x7c, 0x12, 0xa9, 0xc5, 0x9a, 0xb3, 0x06, 0xf0, 0x31, 0xec, 0x0a, 0xe9,
	0x45, 0xd2, 0x9d, 0x10, 0x3a, 0x9e, 0x48, 0xbd, 0xa8, 0x94, 0x55, 0x15, 0x76, 0xaa, 0xa0, 0xc4,
	0x14, 0x8b, 0x67, 0xae, 0x0a, 0x41, 0xe8, 0x25, 0x45, 0xd0, 0x58, 0x3c, 0xeb, 0x2a, 0x00, 0x1f,
	0x40, 0x25, 0xf0, 0xdc, 0xd0, 0x93, 0x13, 0x7d, 0x5b, 0x4d, 0x2f, 0x07, 0xde, 0xb9, 0x27, 0x27,
	0x58, 0x87, 0xca, 0x27, 0x12, 0x09, 0xca, 0x99, 0x5e, 0x56, 0x4d, 0xcb, 0x12, 0xbf, 0x84, 0x3d,
	0x3f, 0x22, 0x9e, 0xa4, 0x9c, 0x2d, 0xf7, 0x56, 0x14, 0xa3, 0xb6, 0x84, 0xb3, 0xd5, 0x26, 0x94,
	0x13, 0x37, 0xb1, 0xd0, 0x77, 0x1a, 0xa8, 0x55, 0xeb, 0x1c, 0xe4, 0x46, 0x10, 0x0b, 0x27, 0xa3,
	0xe1, 0x53, 0xa8, 0xae, 0x8f, 0x25, 0x74, 0x4d, 0x05, 0x77, 0xfc, 0x4f, 0x97, 0x92, 0xde, 0x5b,
	0xdd, 0x53, 0x64, 0xd1, 0xc1, 0x70, 0x89, 0x8b, 0xe6, 0x0f, 0x04, 0xf5, 0x55, 0xbe, 0x17, 0xf1,
	0x6c, 0xe6, 0x45, 0xb7, 0xff, 0xff, 0x38, 0x6b, 0x83, 0x5b, 0x8f, 0x33, 0x98, 0x13, 0x5d, 0x31,
	0x2f, 0xba, 0xe6, 0x77, 0x04, 0x86, 0xb2, 0x99, 0xd6, 0x03, 0x7e, 0x42, 0x99, 0x37, 0xa5, 0x5f,
	0x14, 0xe7, 0x43, 0x4c, 0x62, 0x92, 0x37, 0x0b, 0xe5, 0x9e, 0x61, 0x00, 0x78, 0xf4, 0x57, 0xb7,
	0x7b, 0x9d, 0xb4, 0xeb, 0x5b, 0x8d, 0xe2, 0xe3, 0x8d, 0x3f, 0x1d, 0x6d, 0xae, 0x7f, 0xd5, 0x81,
	0x72, 0x6a, 0x0e, 0x57, 0xa1, 0x72, 0x6e, 0xf5, 0x7b, 0x76, 0xff, 0x5d, 0xbd, 0x80, 0x9f, 0x80,
	0x76, 0x62, 0xf7, 0xdf, 0x9e, 0xd9, 0x97, 0x56, 0xaf, 0x8e, 0xf0, 0x2e, 0xec, 0x38, 0xd6, 0x47,
	0xcb, 0x19, 0x58, 0xbd, 0x7a, 0xb1, 0x7b, 0x76, 0x37, 0x37, 0xd0, 0xfd, 0xdc, 0x40, 0xbf, 0xe7,
	0x06, 0xfa, 0xba, 0x30, 0x0a, 0xf7, 0x0b, 0xa3, 0xf0, 0x73, 0x61, 0x14, 0x2e, 0x3b, 0x63, 0x2a,
	0x27, 0xf1, 0xb0, 0xed, 0xf3, 0x99, 0x99, 0x29, 0x7a, 0xcd, 0x88, 0xfc, 0xcc, 0xa3, 0xab, 0x65,
	0x6d, 0xde, 0xac, 0x5e, 0xb4, 0xbc, 0x0d, 0x89, 0x18, 0x96, 0xd5, 0x3b, 0x7e, 0xf3, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x71, 0x92, 0x75, 0xc3, 0x3a, 0x04, 0x00, 0x00,
}

func (m *StateInfoIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateInfoIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateInfoIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintStateInfo(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockDescs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStateInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Status != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.CreationHeight != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Version != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DaPath) > 0 {
		i -= len(m.DaPath)
		copy(dAtA[i:], m.DaPath)
		i = encodeVarintStateInfo(dAtA, i, uint64(len(m.DaPath)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NumBlocks != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.NumBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.StartHeight != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sequencer) > 0 {
		i -= len(m.Sequencer)
		copy(dAtA[i:], m.Sequencer)
		i = encodeVarintStateInfo(dAtA, i, uint64(len(m.Sequencer)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.StateInfoIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStateInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StateInfoSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateInfoSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateInfoSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationHeight != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.StateInfoIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStateInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BlockHeightToFinalizationQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeightToFinalizationQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeightToFinalizationQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalizationQueue) > 0 {
		for iNdEx := len(m.FinalizationQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalizationQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CreationHeight != 0 {
		i = encodeVarintStateInfo(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateInfoIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovStateInfo(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovStateInfo(uint64(m.Index))
	}
	return n
}

func (m *StateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StateInfoIndex.Size()
	n += 1 + l + sovStateInfo(uint64(l))
	l = len(m.Sequencer)
	if l > 0 {
		n += 1 + l + sovStateInfo(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovStateInfo(uint64(m.StartHeight))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovStateInfo(uint64(m.NumBlocks))
	}
	l = len(m.DaPath)
	if l > 0 {
		n += 1 + l + sovStateInfo(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovStateInfo(uint64(m.Version))
	}
	if m.CreationHeight != 0 {
		n += 1 + sovStateInfo(uint64(m.CreationHeight))
	}
	if m.Status != 0 {
		n += 1 + sovStateInfo(uint64(m.Status))
	}
	l = m.BlockDescs.Size()
	n += 1 + l + sovStateInfo(uint64(l))
	return n
}

func (m *StateInfoSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StateInfoIndex.Size()
	n += 1 + l + sovStateInfo(uint64(l))
	if m.Status != 0 {
		n += 1 + sovStateInfo(uint64(m.Status))
	}
	if m.CreationHeight != 0 {
		n += 1 + sovStateInfo(uint64(m.CreationHeight))
	}
	return n
}

func (m *BlockHeightToFinalizationQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovStateInfo(uint64(m.CreationHeight))
	}
	if len(m.FinalizationQueue) > 0 {
		for _, e := range m.FinalizationQueue {
			l = e.Size()
			n += 1 + l + sovStateInfo(uint64(l))
		}
	}
	return n
}

func sovStateInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateInfo(x uint64) (n int) {
	return sovStateInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StateInfoIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateInfoIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateInfoIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateInfoIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateInfoIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequencer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDescs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockDescs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateInfoSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateInfoSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateInfoSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateInfoIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StateInfoIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeightToFinalizationQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeightToFinalizationQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeightToFinalizationQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizationQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizationQueue = append(m.FinalizationQueue, StateInfoIndex{})
			if err := m.FinalizationQueue[len(m.FinalizationQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateInfo = fmt.Errorf("proto: unexpected end of group")
)
