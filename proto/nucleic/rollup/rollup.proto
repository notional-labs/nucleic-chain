syntax = "proto3";
package nucleic.rollup;

option go_package = "github.com/nucleic-network/nucleic/x/rollup/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "nucleic/rollup/state.proto";
import "nucleic/rollup/bank.proto";

// GenesisAccount is a struct for the genesis account for the Rollup
message GenesisAccount {
    // amount of coins to be sent to the genesis address
    cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
    // address is a bech-32 address of the genesis account
    string address = 2;
}

// RollupGenesisState is a partial repr of the state the hub can expect the Rollup to be in upon genesis
message RollupGenesisState {
    // genesis_accounts is a list of token allocations
    repeated GenesisAccount genesis_accounts = 1;
    // is_genesis_event is a boolean that indicates if the genesis event has occured
    bool is_genesis_event = 2;
}


// Rollup defines a Rollup object. First the Rollup is created and then
// sequencers can be created and attached. The Rollup is identified by RollupId
message Rollup {
    // The unique identifier of the Rollup chain.
    // The RollupId follows the same standard as cosmos chain_id.
    string rollup_id = 1;
    // creator is the bech32-encoded address of the Rollup creator.
    string creator = 2;
    // version is the software and configuration version.
    // starts from 1 and increases by one on every MsgUpdateState
    uint64 version = 3;
    // maxSequencers is the maximum number of sequencers.
    uint64 maxSequencers = 4;
    // permissionedAddresses is a bech32-encoded address list of the sequencers that are allowed to serve this RollupId.
    // In the case of an empty list, the Rollup is considered permissionless.
    repeated string permissionedAddresses = 5;
    // tokenMetadata is a list of TokenMetadata that are registered on this Rollup
    repeated TokenMetadata tokenMetadata = 6;
    // genesis_state is a partial repr of the state the hub can expect the Rollup to be in upon genesis
    RollupGenesisState genesis_state = 7 [(gogoproto.nullable) = false];
    // channel_id will be set to the canonical IBC channel of the Rollup.
    string channel_id = 8;
    // frozen is a boolean that indicates if the Rollup is frozen.
    bool frozen = 9;
}
  
// Rollup summary is a compact representation of Rollup
message RollupSummary {
    // The unique identifier of the Rollup chain.
    // The RollupId follows the same standard as cosmos chain_id.
    string rollup_id = 1;
    // Defines the index of the last Rollup UpdateState.
    StateInfoIndex latestStateIndex = 2;
    // Defines the index of the last Rollup UpdateState that was finalized.
    StateInfoIndex latestFinalizedStateIndex = 3;
}